function [methodinfo,structs,enuminfo,ThunkLibName]=intervalx_adapt_proto
%INTERVALX_ADAPT_PROTO Create structures to define interfaces found in 'intervalx_adapt'.

%This function was generated by loadlibrary.m parser version 1.1.6.32 on Fri Dec 12 01:49:37 2014
%perl options:'intervalx_adapt.i -outfile=intervalx_adapt_proto.m -thunkfile=intervalx_adapt_thunk_pcwin64.c'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'intervalx_adapt_thunk_pcwin64');
%  void Addx ( double * pZ , double * pX , double * pY , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Addx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Caddx ( double * pZ , double * pX , double * pY , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Caddx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Csubx ( double * pZ , double * pX , double * pY , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Csubx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Cmulx ( double * pZ , double * pX , double * pY , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Cmulx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Cdivx ( double * pZ , double * pX , double * pY , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Cdivx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Cequalx ( double * pY , double * pX , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Cequalx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Cminx ( double * pZ , double * pX , double * pY , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Cminx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Cmaxx ( double * pZ , double * pX , double * pY , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Cmaxx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Cabsx ( double * pY , double * pX , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Cabsx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Csignx ( double * pY , double * pX , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Csignx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Cchix ( double * pZ , double * pW , double * pX , double * pY , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Cchix'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Cgeqx ( double * pY , double * pX , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Cgeqx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Cintegerx ( double * pX , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Cintegerx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Cbooleanx ( double * pX , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Cbooleanx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Csqrx ( double * pY , double * pX , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Csqrx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Cexpx ( double * pY , double * pX , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Cexpx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Clogx ( double * pY , double * pX , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Clogx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Cpowx ( double * pY , double * pX , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Cpowx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Ccosx ( double * pY , double * pX , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Ccosx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Csinx ( double * pY , double * pX , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Csinx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Ctanx ( double * pY , double * pX , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Ctanx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Catanx ( double * pY , double * pX , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Catanx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Cnormx ( double * pZ , double * pX , double * pY , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Cnormx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Cnorm3Dx ( double * pN , double * pX , double * pY , double * pZ , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Cnorm3Dx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Cdistx ( double * pZ , double * pV , double * pW , double * pX , double * pY , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Cdistx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Cscalx ( double * pZ , double * pV , double * pW , double * pX , double * pY , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Cscalx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Cdetx ( double * pZ , double * pV , double * pW , double * pX , double * pY , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Cdetx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void CinRingx ( double * pX , double * pY , double * pcx , double * pcy , double * pR , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='CinRingx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Bisectx ( double * pX , double * pX1 , double * pX2 , unsigned int n ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='Bisectx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'uint32'};fcnNum=fcnNum+1;
%  void Widthx ( double * py , double * pX , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Widthx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Volumex ( double * py , double * pX , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Volumex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Anglex ( double * pz , double * pX , double * pY , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='Anglex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void decreasex ( double * pz , double * pX , double * pY , unsigned int nb , unsigned int n , unsigned int m ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='decreasex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Interx ( double * pr , double * px , unsigned int nb , unsigned int n ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint32uint32Thunk';fcns.name{fcnNum}='Interx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  void Unionx ( double * pr , double * px , unsigned int nb , unsigned int n ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint32uint32Thunk';fcns.name{fcnNum}='Unionx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
methodinfo=fcns;